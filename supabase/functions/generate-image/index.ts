
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// API Keys
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
const ANTHROPIC_API_KEY = Deno.env.get('ANTHROPIC_API_KEY');
const GOOGLE_API_KEY = Deno.env.get('GOOGLE_API_KEY');
const KRUTRIM_API_KEY = Deno.env.get('KRUTRIM_API_KEY');

// Handle OpenAI image generation
async function generateWithOpenAI(prompt: string, model = "dall-e-3", size = "1024x1024", quality = "standard", style = "vivid", n = 1) {
  console.log(`Generating image with OpenAI: ${prompt}`);
  
  const response = await fetch('https://api.openai.com/v1/images/generations', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      prompt,
      model,
      n,
      size,
      quality,
      style,
      response_format: "url"
    }),
  });

  const data = await response.json();
  
  if (!response.ok) {
    console.error("OpenAI error:", data);
    throw new Error(`OpenAI API error: ${data.error?.message || 'Unknown error'}`);
  }
  
  return data.data.map((image: any) => ({
    url: image.url,
    revised_prompt: image.revised_prompt
  }));
}

// Handle Anthropic image generation (Claude 3 Sonnet/Opus)
async function generateWithAnthropic(prompt: string, model = "claude-3-opus-20240229") {
  console.log(`Generating image with Anthropic: ${prompt}`);
  
  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': ANTHROPIC_API_KEY,
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model,
      max_tokens: 1024,
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Generate an image based on this description: ${prompt}. Respond with only the image, no text.`
            }
          ]
        }
      ]
    }),
  });

  const data = await response.json();
  
  if (!response.ok) {
    console.error("Anthropic error:", data);
    throw new Error(`Anthropic API error: ${data.error?.message || 'Unknown error'}`);
  }
  
  // Extract image from the content response
  const imageContent = data.content.find((c: any) => c.type === 'image');
  
  if (imageContent) {
    return [{
      url: imageContent.source.url,
      revised_prompt: prompt
    }];
  } else {
    throw new Error('No image was generated');
  }
}

// Handle Google Gemini image generation
async function generateWithGemini(prompt: string, model = "gemini-1.5-pro") {
  console.log(`Generating image with Gemini: ${prompt}`);
  
  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-goog-api-key': GOOGLE_API_KEY,
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: `Generate an image based on this description: ${prompt}. Only respond with the image, no text.`
        }]
      }]
    }),
  });

  const data = await response.json();
  
  if (!response.ok) {
    console.error("Gemini error:", data);
    throw new Error(`Gemini API error: ${data.error?.message || 'Unknown error'}`);
  }
  
  // Extract image from the content response
  const images = [];
  for (const part of data.candidates?.[0]?.content?.parts || []) {
    if (part.inlineData?.mimeType?.startsWith('image/')) {
      images.push({
        url: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,
        revised_prompt: prompt
      });
    }
  }
  
  if (images.length === 0) {
    throw new Error('No image was generated by Gemini');
  }
  
  return images;
}

// Main request handler
serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }
  
  try {
    const { prompt, provider, model, size, quality, style, n } = await req.json();
    
    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Prompt is required' }), 
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }
    
    let result;
    
    // Route to the appropriate provider
    switch (provider.toLowerCase()) {
      case 'openai':
        if (!OPENAI_API_KEY) {
          throw new Error('OpenAI API key not configured');
        }
        result = await generateWithOpenAI(prompt, model, size, quality, style, n);
        break;
        
      case 'anthropic':
        if (!ANTHROPIC_API_KEY) {
          throw new Error('Anthropic API key not configured');
        }
        result = await generateWithAnthropic(prompt, model);
        break;
        
      case 'gemini':
        if (!GOOGLE_API_KEY) {
          throw new Error('Google API key not configured');
        }
        result = await generateWithGemini(prompt, model);
        break;
        
      default:
        return new Response(
          JSON.stringify({ error: 'Unsupported provider' }), 
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
        );
    }
    
    return new Response(
      JSON.stringify({ images: result }), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('Error in generate-image function:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unknown error occurred' }), 
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
