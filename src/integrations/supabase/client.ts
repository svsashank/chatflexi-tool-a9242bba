
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dftrmjnlbmnadggavtxs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmdHJtam5sYm1uYWRnZ2F2dHhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNDMxNDMsImV4cCI6MjA1ODkxOTE0M30.Vq3a8gJjo4IP67texft7Sg4E0DTMpIiX-EefNwUyR3M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single, shared Supabase client instance
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'supabase.auth.token',
    // Only enable debug logging in development
    debug: process.env.NODE_ENV === 'development'
  }
});

// Helper function to check if a user is authenticated
export const isAuthenticated = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error checking authentication:", error);
      return false;
    }
    return !!data.session?.user;
  } catch (error) {
    console.error("Unexpected error in isAuthenticated:", error);
    return false;
  }
};

// Updated function that uses the edge function to safely fetch profile data
export const fetchProfileData = async () => {
  try {
    // First check if we already have a session in memory before making a network request
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session) {
      console.error("Session error:", sessionError);
      return { 
        data: null, 
        error: new Error(sessionError?.message || "No active session") 
      };
    }
    
    const token = session.access_token;
    
    if (!token) {
      return { data: null, error: new Error("No access token available") };
    }
    
    // Call our edge function instead of directly querying the database
    console.log("Fetching profile data via edge function");
    const response = await fetch(
      `${SUPABASE_URL}/functions/v1/get-profile`,
      {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Profile data fetch error (${response.status}):`, errorText);
      
      try {
        const errorJson = JSON.parse(errorText);
        return { 
          data: null, 
          error: new Error(errorJson.message || errorJson.error || `Failed with status ${response.status}`) 
        };
      } catch (e) {
        return { 
          data: null, 
          error: new Error(`Failed with status ${response.status}: ${errorText.substring(0, 100)}`) 
        };
      }
    }

    const result = await response.json();
    console.log("Profile data retrieved:", result);
    
    if (result.data) {
      return { data: [result.data], error: null };
    } else if (result.error === 'Profile not found') {
      console.error("Profile not found for current user");
      return { data: null, error: new Error("Profile not found. Please contact support.") };
    } else {
      return { data: [], error: null };
    }
  } catch (error) {
    console.error("Error in fetchProfileData:", error);
    return { 
      data: null, 
      error: new Error(error.message || "Unknown error fetching profile data") 
    };
  }
};
